<?php

/**
 * Implements hook_fontyourface_api()
 */
function google_fonts_api_fontyourface_api() {
  return [
    'version' => '3'
  ];
}

/**
 * Implements hook_fontyourface_import().
 */
function google_fonts_api_fontyourface_import() {

  // Return the JSON object with all available fonts
  // For now, it uses the API key of BarisW (co-maintainer of this module)
  
  // This key is limited to 10.000 requests per day, which should
  // be sufficient as it is only used when selecting fonts in the
  // admin interface. After that, the fonts are cached in Drupal.


  try {
    $uri = 'https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBgeqKlFdYj3Y7VwmrEXnXzpnx5TfKXG4o';
    $response = \Drupal::httpClient()->get($uri, array('headers' => array('Accept' => 'text/plain')));
    $data = (string) $response->getBody();
  }
  catch (RequestException $e) {
    drupal_set_message(t('The list of Google Fonts could not be fetched. Verify that your server can connect the Google Servers (https://www.googleapis.com). Error: %error', array('%error' => $result->error)), 'error');
    return FALSE;
  }

  $json_results = json_decode($data);

  $fonts = _google_fonts_api_convert_api_results($json_results->items);

  foreach ($fonts as $font) {

    if (!isset($font->tags)) {
      $font->tags = array();
    } // if
    fontyourface_save_font($font);

  } // foreach
  
  return $success; 
  
} // google_fonts_api_fontyourface_import

/**
 * Converts the Google Fonts API JSON results to a generic Fonts object array
 *
 * @param $json_font_list: Array of Font objects
 *   
 */
function _google_fonts_api_convert_api_results($json_font_list) {
  $fonts = array();
  foreach ($json_font_list as $json_font) {
    foreach ($json_font->variants as $json_font_variant) {
      foreach ($json_font->subsets as $json_font_subset) {
      
        $font_id = $json_font->family . ' ' . $json_font_variant . ' (' . $json_font_subset . ')';
        
        switch ($json_font_variant) {
          case 'regular':
            $css_style = 'normal';
            $css_weight = 'normal';
            break;
            
          case 'italic':
            $css_style = 'italic';
            $css_weight = 'normal';
            break;
            
          case 'bold':
            $css_style = 'normal';
            $css_weight = 'bold';
            break;
            
          case 'bolditalic':
            $css_style = 'italic';
            $css_weight = 'bold';
            break;

          default:
            // For all other cases (eg 400 or 400italic)
            if (is_numeric($json_font_variant)) {
              // Variant is a number, like 400
              $css_style = 'normal';
              $css_weight = $json_font_variant;
            } //if
            elseif (is_numeric(substr($json_font_variant, 0, 3))){
              // Variant is a combined string of number and string, like 400italic
              // The numberic part is always three characters long, so we can split it easily
              $css_style = substr($json_font_variant, 3);
              $css_weight = substr($json_font_variant, 0, 3);
            } //elseif
        } //switch
        
        $fonts[$font_id] = new stdClass;
        $fonts[$font_id]->name = $font_id;
        $fonts[$font_id]->url = 'http://www.google.com/webfonts/family?family=' . $json_font->family . '&subset=' . $json_font_subset . '#' . $json_font_variant;
        $fonts[$font_id]->provider = 'google_fonts_api';
        $fonts[$font_id]->css_family = $json_font->family;
        $fonts[$font_id]->css_style = $css_style;
        $fonts[$font_id]->css_weight = $css_weight;
        $fonts[$font_id]->foundry = '';
        $fonts[$font_id]->foundry_url = '';
        $fonts[$font_id]->license = '';
        $fonts[$font_id]->license_url = '';
        $fonts[$font_id]->metadata = serialize(array('path' => $json_font->family . ':' . $json_font_variant, 'subset' => $json_font_subset));
        
        $tag_object = new StdClass;
        $tag_object->type = 'subset';
        $tag_object->name = $json_font_subset;
        $fonts[$font_id]->tags[] = $tag_object;

      } //foreach
    } //foreach
  } //foreach
  
  return $fonts;
  
} // _google_fonts_api_convert_api_results
