<?php

/**
 * @file
 * Contains fontyourface.module..
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\fontyourface\Entity\Font;

/**
 * Implements hook_help().
 */
function fontyourface_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fontyourface module.
    case 'help.page.fontyourface':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Web font management tools.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function fontyourface_theme() {
  return [
    'font' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for Font templates.
 *
 * Default template: font.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_font(array &$variables) {
  // Fetch Font Entity Object.
  $font = $variables['elements']['#font'];
  $fonts = &drupal_static('fontyourface_dynamic_preview_fonts');
  $fonts[$font->getUrl()] = $font;

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Saves a font.
 */
function fontyourface_save_font($font_data) {
  $font = Font::create([
    'pid' => $font_data->provider,
    'url' => $font_data->url,
    'name' => $font_data->name,
    'css_family' => $font_data->css_family,
    'css_style' => $font_data->css_style,
    'css_weight' => $font_data->css_weight,
    'foundry' => $font_data->foundry,
    'foundry_url' => $font_data->foundry_url,
    'license' => $font_data->license,
    'license_url' => $font_data->license_url,
    'designer' => $font_data->designer,
    'designer_url' => $font_data->designer_url,
    'metadata' => $font_data->metadata,
  ]);
  $font->save();
}
