<?php

/**
 * @file
 * Contains fontyourface.module..
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\fontyourface\Entity\Font;
use Drupal\fontyourface\Entity\FontDisplay;

/**
 * Implements hook_help().
 */
function fontyourface_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fontyourface module.
    case 'help.page.fontyourface':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Web font management tools.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function fontyourface_theme() {
  return [
    'font' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function fontyourface_page_attachments(&$page) {
  $preview_fonts = &drupal_static('fontyourface_dynamic_preview_fonts');
  // On a font preview page, ONLY show the preview font and other base theme font.
  if (!empty($preview_fonts)) {
    foreach ($preview_fonts as $preview_font) {
      $elements = \Drupal::moduleHandler()->invoke($preview_font->getProvider(), 'fontyourface_generate_font_family_css', [[$preview_font]]);
      foreach ($elements as $element) {
        $page['#attached']['html_head'][] = [$element, $preview_font->css_family->value];
      }
      $page['#attached']['html_head'][] = [[
        '#type' => 'html_tag',
        '#tag' => 'style',
        '#value' => '.fontyourface-preview { '. fontyourface_font_css($preview_font) . ' }',
      ], $preview_font->id() . '-fontyourface-preview'];
    }
  }
  else {
    // We are dealing with a regular page;
    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $styles = FontDisplay::loadByTheme($theme);
    foreach ($styles as $style) {
      $font = $style->getFont();
      if (!empty($font) && Drupal::moduleHandler()->moduleExists($font->getProvider())) {
        $elements = \Drupal::moduleHandler()->invoke($font->getProvider(), 'fontyourface_generate_font_family_css', [[$font]]);
        foreach ($elements as $element) {
          $page['#attached']['html_head'][] = [$element, $font->css_family->value];
        }
        $page['#attached']['html_head'][] = [[
          '#type' => 'html_tag',
          '#tag' => 'style',
          '#value' => $style->getSelectors() . ' { '. fontyourface_font_css($font, $style) . ' }',
        ], $style->id() . '-fontyourface-full'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function fontyourface_preprocess_html(&$variables) {
  $variables['attributes']['class'][] = 'fontyourface';
}
/**
 * Prepares variables for Font templates.
 *
 * Default template: font.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_font(array &$variables) {
  // Fetch Font Entity Object.
  $font = $variables['elements']['#font'];
  $fonts = &drupal_static('fontyourface_dynamic_preview_fonts');
  $fonts[$font->url->value] = $font;

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Saves a font.
 */
function fontyourface_save_font($font_data) {
  $font = Font::loadByUrl($font_data->url);
  if (empty($font)) {
    $font = Font::create();
  }
  $font->pid = $font_data->provider;
  $font->url = $font_data->url;
  $font->name = $font_data->name;
  $font->css_family = $font_data->css_family;
  $font->css_style = $font_data->css_style;
  $font->css_weight = $font_data->css_weight;
  $font->foundry = $font_data->foundry;
  $font->foundry_url = $font_data->foundry_url;
  $font->license = $font_data->license;
  $font->license_url = $font_data->license_url;
  $font->designer = $font_data->designer;
  $font->designer_url = $font_data->designer_url;
  $font->metadata = $font_data->metadata;
  $font->save();
}

/**
 * Creates CSS with any properties set on font.
 */
function fontyourface_font_css($font, $font_style = NULL) {

  $css = [];

  // Enclose font family definition in single quotes if not already enclosed.
  if ($font->css_family->value === "'") {
    $family_list = $font->css_family->value;
  } // if
  else {
    $family_list = "'" . $font->css_family->value . "'";
  } // else

  if ($font_style !== NULL) {
    if ($font->css_fallbacks) {
      $family_list .= ', ' . $font->css_fallbacks;
    } // if
  }

  $css[] = 'font-family: ' . $family_list . ';';
  $css[] = 'font-style: ' . $font->css_style->value . ';';
  $css[] = 'font-weight: ' . $font->css_weight->value . ';';

  return implode(' ', $css);

}